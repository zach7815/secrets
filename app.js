require('dotenv').config();
const express = require("express");
const bodyParser = require("body-parser");
const ejs = require("ejs");
const mongoose = require("mongoose");
const bcrypt = require("bcrypt");
const saltRounds = 10;

const app=express();


app.use(express.static("public"));
app.set("view engine", "ejs");
app.use(bodyParser.urlencoded({extended:true}));



// deploys mongoDB server
mongoose.connect('mongodb://localhost:27017/userDB');

const userSchema = new mongoose.Schema({
    username:String,
    password:String
});



const User = new mongoose.model ("User", userSchema);


app.get("/", (req,res)=>{
    res.render("home");
})


app.get("/login", (req,res)=>{
    res.render("login",{errMsg:"", username:"", password:""});
})

app.get("/register", (req,res)=>{
    res.render("register");
})

// hashes password with bcrpyt and 10 rounds of Salting
app.post("/register", (req,res)=>{
   
  bcrypt.hash(req.body.password,saltRounds, (err,hash)=>{

    const newUser = new User({
      username: req.body.username,
      // use the hash generated by bcrypt to be put into the password part of db. 
     password:hash
    });

  newUser.save((err)=>{
      if(err){
          console.log(err)
      }else{
          res.render("secrets")
      }
  })
});
  
  
 
});


app.post("/login", (req, res) => {
    
  const username = req.body.username;
    const password = req.body.password;
   
    User.findOne({email: username}, (err, foundUser) => {
      if (err) {
        console.log(err);
      } else {
        if (foundUser) {
          bcrypt.compare(password, foundUser.password, function(err, result) {
            if (result === true) {
              res.render("secrets");
            }
            else {
              console.log("incorrect p")
            }    
        });
        
        }
      }
    });
  });



app.listen(3000,function(){
    console.log("server running on port 3000")
});




